select ename, job,sal from emp where ename like 'A%';

select ename, sal from emp where sal > (select avg(sal) from emp);
select avg(sal) from emp;

select ename, hiredate from emp where to_char(hiredate,'mm') = '12';

select name 이름, weight 몸무게 from student
where deptno1 > (select avg(weight) from student where deptno1 = '101');

select name, position, pay, hiredate from professor where hiredate
= (select hiredate from professor where name = '심슨')
and pay < (select pay from professor where name = '조인형');

--[그룹함수] Group by절_특정조건으로 세부적인 그룹
--professo_ 학과별로 교수들의 평균급여를 조회
select deptno,avg(nvl(pay,0)) "평균급여" from professor group by deptno;
--professor_직급별로 교수들의 총급여를 조회
select position, sum(pay) from professor group by position;
--professor_학과별,직급별 교수들의 평균급여
select deptno,position, avg(pay) from professor
group by deptno, position;

select deptno, pay from professor;
--직급별 평균 보너스
select deptno, avg(pay) from professor
group by deptno;

select * from professor;
--stduent,학년별 평균키와최고몸무게 조회
select grade, avg(height),max(height) from student group by grade;
--professor, 직급별 평균 급여와 최고 보너스
select deptno, avg(pay),min(nvl(bonus,0)) from professor group by deptno;
--emp job별로 sal의 최대값과 최솟값조회
select job, max(sal),min(sal) from emp group by job;
--emp iob별로 인원수 조회
select job , count(*) from emp group by job;

--having절_그룹내에서 조건을 주고 검색시...반드시...group by절 뒤
--평균급여가 3000이산인 부서의 부서번호와 평균급여를 구하시오.

select deptno,avg(nvl(sal,0)) from emp group by deptno having avg(nvl(sal,0)) > 2000;

--where절은 그룹함수 비교조건으로 쓸수 없다.

--professor_평균급여가 450이상인 학과의 학과번호와 평균급여를 구하시오.
select deptno, avg(nvl(pay,0))"평균급여" from professor group by deptno having avg(nvl(pay,0)) > 450;
select * from emp;

--emp job별로 직원수가 2명이상인 경우의 부서 조회
select job, count(*)from emp group by job having count(*) >= 2;
--emp 총급여가 5000이상인 job별로 급여의 합계를 조회하되 10번부서는 제외하고 조회하되 단 급여가 많은 순서대로 조회
select job, sum(sal) from emp where job not in ('MANAGER')
group by job having sum(sal) >= 5000 
order by sum(sal) desc;



--------------------------------------------------------------------------------------------------------------------------------------------
--[DDL] & [DML]
--테이블 생성
create table test(num number(5) primary key,name varchar(20), score number(6,2), birth date);

--구조확인
desc test;

--test에 insert
--전체테이타
insert into test values(1,'박용희',88.88,'2000-04-28'); 

--일부데이타
insert into test (num,name) values(2,'조태민');

select * from test;

select name from test;

--데이타 더 추가(sysdate)
insert into test values(3,'손흥민','89.8',sysdate);

--무결성 제약조건 오류가난다 (num이 기본키이므로 같은값은 넣을 수 없다.)
--insert into test values(2,'손흥민',88,sysdate);

select * from test;

--나이를 저장할 컬럼 추가
alter table test add age number(5);

--주소를 저장할 컬럼 추가..초기값을 강남구 라고 지정
alter table test add addr varchar2(30)default '강남구';

--주소 문자타입이 30 ==>50 으로 변경
alter table test modify addr varchar2(50);

--나이를 문자열로 바꾸고 기본값은 20으로 지정
alter table test modify age varchar2(10)default '20';

--추가
insert into test values (4,'지니',77.5,sysdate,'21세','서울시 강서구');
insert into test (num,name,addr) values (5,'미숙','10');

select * from test order by num ;

alter table test drop COLUMN age;

alter table test drop column addr;
desc test;

alter table test rename column score to jumsoo;

alter table test rename column birth to birthday;

drop table test;

--[시퀀스]
--유일한(unigue) 값을 생성해주는 객체
--시퀀스를 생성하면 기본키처럼 순차적으로 증가하는 컬럼을 자동으로 생성가능
--primary key를 생성하기 위해 사용

--기본시퀀스 생성 1부터 1씩 증가
create SEQUENCE seq1;

--전체 시퀀스 확인
select * from seq;

--다음시퀀스 값을 발생시켜 콘솔에 출력
select seq1.nextval from dual;

--현재 마지막값 발생 시큐퀀스 확인
select seq1.currval from dual;

drop sequence seq1;

--10부터 5씩 증가하는 시퀀스 생성 캐쉬도 없애기
create sequence seq1 start with 10 increment by 5 nocache;

--시퀀스 수정
alter sequence seq1 increment by 10 MAXVALUE 100 cycle;

--삭제
drop sequence seq1;

--seq1 시작값 : 5 캐리 : no cycle : no
create sequence seq1 start with 5 increment by 2 maxvalue 30 nocache cycle;
--seq2 시작값 : 1 증가값 : 2 캐시: no
create sequence seq2 start with 1 increment by 2 nocache;

select seq1.nextval, seq2.nextval from dual;

drop sequence seq2;

-----------------------------------------------------------------------------------------------------------------------------
--시퀀스 생성
create  sequence seq1 nocache ;
--테이블 생성
create table info(num number(5) primary key, name varchar2(20), job varchar2(30)
, gender varchar2(10), age number(5), hp varchar2(20), birth date);
--birth를 ipsaday로 변경
alter table info rename column birth to ipsaday;

--조회연습 위해서 10개이상 insert job( 프로그래머,교사,엔지니어)
insert into info values(seq1.nextval,'박용희','프로그래머','남자',26,'010-1234-5678','2025-03-17');
insert into info values(seq1.nextval,'조태민','프로그래머','남자',26,'010-5467-4122','2025-01-18');
insert into info values(seq1.nextval,'아이유','교사','여자',36,'010-1259-1142','2023-09-20');
insert into info values(seq1.nextval,'손흥민','엔지니어','남자',38,'010-4218-9715','2022-12-17');
insert into info2 values(seq1.nextval,'김태형','교사','남자',22,'010-4971-9153','2024-07-01');
insert into info2 values(seq1.nextval,'카리나','프로그래머','여자',28,'010-4217-1294','2024-04-29','수원시');
insert into info2 values(seq1.nextval,'장원영','교사','여자',19,'010-9153-5327','2024-11-11');
insert into info values(seq1.nextval,'박서준','프로그래머','남자',42,'010-5665-0523','2022-09-17');
insert into info values(seq1.nextval,'김다미','엔지니어','여자',31,'010-5217-4297','2025-02-20');
insert into info values(seq1.nextval,'서예지','엔지니어','여자',46,'010-1512-5878','2024-08-17');
insert into info values(seq1.nextval,'손석구','엔지니어','남자',57,'010-1876-5234','2023-04-17');

select * from info order by age desc;
--컬럼명 대신 컬럼번호로 적어도 된다 
select * from info order by age desc;

--성별오름차순,같을경우 이름의 내림차순
select * from info order by gender asc, name desc;
--직업만 출력
select job, count(*) from info group by job;
select distinct job from info;

--성씨 현씨만 조회
select * from info where name like '김%';

--핸드폰 번호 010인 사람만
select * from info where hp like '010%';

--입사년도가 3월에 입사함 사람
select * from info where ipsaday like '____3%';
select * from info where to_char(ipsaday, 'mm') like '03';

--입사년도가 22년도 인사람
select * from info where to_char(ipsaday,'YYYY') like '2022';

--나이가 30~40사이 출력 (between, and)
select * from info where age between 30 and 40;
select * from info where age >=30 and age <=40;

--직업이 교사거나 엔지니어인사람 조회 2가지방법
select * from info where job = '엔지니어' or job = '교사';
select * from info where job in('엔지니어', '교사');

--교사,엔지니어만 제외한직업 조회
select * from info where job not in('엔지니어','교사');

--문제
--성이 이씨이거나 최씨인사람
select * from info where name like '박%' or name like '김%';

--여자이면서 나이가 30세 이상 조화ㅣ
select * from info where age >=30 and gender = '여자';

--남자들 평균 나이 구하기 (소수점 한자리)
select round(avg(age),1)"평균나이"from info;
--평균나이보다 많은 사람의 이름과 직업 나이를 출력(서브쿼리)
select name, job, age from info where age > (select avg(age) from info); 
--3워이나 6월에 입사람 사람
select * from info where to_char(ipsaday,'mm') between 03 and 06;

--테이블 복사본 생성
create table info2 as select * from info;

--info 3번의 직업과 나이 수정.. 조건을 안쓰면 전체 데이타 수정
update info set job ='간호사', age = '29';

--잘못수정한거 되돌리기
rollback;

update info set job = '연극배우', age = '22' where num = 3;

--장씨이면서 교사인 사람의 성별을 남자로 변경
update info set gender = '남자' where name like '장%';

update info set job = '유투버', ipsaday ='2024-12-25' where num =2;

--info2
--num이 5번인 사람 삭제
delete from info2 where num = 5;

--여자이면서 나이 30이상 모두 삭제
delete from info2 where gender = '여자' and age >= 30;

--7번이면서 핸드폰 끝자리가 5234인사람 삭제
delete from info2 where num = 25 and hp like '%5234';

--직업이 교사이거나 프로그래머인사람 삭제
delete from info2 where job between '교사' and '프로그래머';

--컬럼 추가 addr 30바이트
alter table info2 add addr varchar2(30);

--컬럼명 변경
alter table info2 rename column hp to handphone; 

--데이타를 추가하는데 num, name, gender, job, addr만 넣기
insert into info2(num,name,gender,job,addr) values (seq1.nextval,'박용희','남자','알바','서울시');
--핸드폰이 null이 아닌 사람만 좋회
select * from info2 where handphone is not null;

--null일경우  age는 20, 핸드폰은 *** 이름,직업,나이,핸드폰을 출력
select name, job,nvl(age,20),nvl(handphone,'***-****-****') from info2;






desc info;
select * from info2;
